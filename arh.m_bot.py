import os
import json
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
AWAITING_BIRTHDAY, AWAITING_WISH, EDITING_WISH = range(3)

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
BIRTHDAYS_FILE = 'birthdays.json'
WISHLISTS_FILE = 'wishlists.json'
SETTINGS_FILE = 'settings.json'
ADMIN_USERNAME = '@mr_jasp'  # –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
def load_data(filename):
    if os.path.exists(filename):
        try:
            with open(filename, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Error loading {filename}: {e}")
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data, filename):
    try:
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        logger.error(f"Error saving {filename}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
birthdays = load_data(BIRTHDAYS_FILE)
wishlists = load_data(WISHLISTS_FILE)
settings = load_data(SETTINGS_FILE)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
if 'reminder_time' not in settings:
    settings['reminder_time'] = "13:00"
    save_data(settings, SETTINGS_FILE)

# –§–∏–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
PROFANITY_FILTER = re.compile(r'\b(–ø–ª–æ—Ö–æ–µ—Å–ª–æ–≤–æ1|–ø–ª–æ—Ö–æ–µ—Å–ª–æ–≤–æ2)\b', re.IGNORECASE)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def is_valid_birthday(date_str):
    try:
        date = datetime.strptime(date_str, '%d.%m.%Y')
        if date > datetime.now():
            return False
        return True
    except ValueError:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã
def welcome_new_member(update: Update, context: CallbackContext):
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            continue
        
        chat_id = update.effective_chat.id
        user_id = member.id
        username = member.username or member.first_name
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {username}!\n"
            "–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è üéâ\n\n"
            "–Ø –±—É–¥—É:\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –≤–µ—Å—Ç–∏ wish-–ª–∏—Å—Ç—ã\n"
            "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –∏ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.1990)"
        )
        
        update.message.reply_text(welcome_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        context.user_data['new_user'] = {
            'chat_id': chat_id,
            'user_id': user_id,
            'username': username
        }
        return AWAITING_BIRTHDAY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def process_birthday(update: Update, context: CallbackContext):
    user_data = context.user_data.get('new_user')
    if not user_data:
        return ConversationHandler.END
    
    chat_id = user_data['chat_id']
    user_id = user_data['user_id']
    date_str = update.message.text
    
    if not is_valid_birthday(date_str):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì")
        return AWAITING_BIRTHDAY
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if str(chat_id) not in birthdays:
        birthdays[str(chat_id)] = {}
    
    birthdays[str(chat_id)][str(user_id)] = {
        'username': user_data['username'],
        'birthday': date_str
    }
    save_data(birthdays, BIRTHDAYS_FILE)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è wish-–ª–∏—Å—Ç–∞
    if str(chat_id) not in wishlists:
        wishlists[str(chat_id)] = {}
    wishlists[str(chat_id)][str(user_id)] = []
    save_data(wishlists, WISHLISTS_FILE)
    
    update.message.reply_text(
        "‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–≤–æ–µ–≥–æ wish-–ª–∏—Å—Ç–∞:"
    )
    return AWAITING_WISH

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –≤ wish-–ª–∏—Å—Ç
def add_wish_item(update: Update, context: CallbackContext):
    user_data = context.user_data.get('new_user')
    if not user_data:
        return ConversationHandler.END
    
    chat_id = user_data['chat_id']
    user_id = user_data['user_id']
    wish_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–Ω–∑—É—Ä—É
    if PROFANITY_FILTER.search(wish_text):
        update.message.reply_text("‚ùå –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞! –ò–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.")
        return AWAITING_WISH
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞
    wish_item = {
        'id': datetime.now().timestamp(),
        'text': wish_text
    }
    wishlists[str(chat_id)][str(user_id)].append(wish_item)
    save_data(wishlists, WISHLISTS_FILE)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data='add_more')],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='finish')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "‚úÖ –ü—É–Ω–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è wish-–ª–∏—Å—Ç–∞
def wish_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == 'add_more':
        query.edit_message_text("–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç wish-–ª–∏—Å—Ç–∞:")
        return AWAITING_WISH
    
    elif query.data == 'finish':
        query.edit_message_text("üéâ –¢–≤–æ–π wish-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ú–æ–∂–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ wish-–ª–∏—Å—Ç–∞
def show_my_wishlist(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if str(chat_id) not in wishlists or str(user_id) not in wishlists[str(chat_id)]:
        update.message.reply_text("‚ùå –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞!")
        return
    
    wish_items = wishlists[str(chat_id)][str(user_id)]
    if not wish_items:
        update.message.reply_text("‚ùå –¢–≤–æ–π wish-–ª–∏—Å—Ç –ø—É—Å—Ç!")
        return
    
    response = "üìù –¢–≤–æ–π wish-–ª–∏—Å—Ç:\n\n"
    for i, item in enumerate(wish_items, 1):
        response += f"{i}. {item['text']}\n"
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data='add_item')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data='delete_item')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ª–∏—Å—Ç", callback_data='clear_list')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(response, reply_markup=reply_markup)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ wish-–ª–∏—Å—Ç–∞
def edit_wishlist(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if query.data == 'add_item':
        query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –¥–ª—è wish-–ª–∏—Å—Ç–∞:")
        context.user_data['wish_action'] = 'add'
        return AWAITING_WISH
    
    elif query.data == 'delete_item':
        wish_items = wishlists[str(chat_id)][str(user_id)]
        if not wish_items:
            query.edit_message_text("‚ùå –¢–≤–æ–π wish-–ª–∏—Å—Ç –ø—É—Å—Ç!")
            return
        
        keyboard = []
        for i, item in enumerate(wish_items, 1):
            keyboard.append([InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç {i}", 
                callback_data=f"delete_{item['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    
    elif query.data == 'clear_list':
        wishlists[str(chat_id)][str(user_id)] = []
        save_data(wishlists, WISHLISTS_FILE)
        query.edit_message_text("‚úÖ –í–µ—Å—å wish-–ª–∏—Å—Ç —É–¥–∞–ª—ë–Ω!")
    
    elif query.data.startswith('delete_'):
        item_id = float(query.data.split('_')[1])
        wish_items = wishlists[str(chat_id)][str(user_id)]
        wishlists[str(chat_id)][str(user_id)] = [
            item for item in wish_items if item['id'] != item_id
        ]
        save_data(wishlists, WISHLISTS_FILE)
        query.edit_message_text("‚úÖ –ü—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω!")
    
    elif query.data == 'cancel':
        query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
def show_birthdays(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if str(chat_id) not in birthdays:
        update.message.reply_text("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è!")
        return
    
    response = "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for user_id, data in birthdays[str(chat_id)].items():
        response += f"‚Ä¢ {data['username']}: {data['birthday']}\n"
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ wish-–ª–∏—Å—Ç–æ–≤
    keyboard = [[
        InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å wish-–ª–∏—Å—Ç—ã", callback_data='view_wishlists')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(response, reply_markup=reply_markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä wish-–ª–∏—Å—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def show_all_wishlists(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    
    if str(chat_id) not in wishlists or not wishlists[str(chat_id)]:
        query.edit_message_text("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –µ—â—ë –Ω–µ—Ç wish-–ª–∏—Å—Ç–æ–≤!")
        return
    
    keyboard = []
    for user_id, data in birthdays[str(chat_id)].items():
        if user_id in wishlists[str(chat_id)]:
            keyboard.append([
                InlineKeyboardButton(
                    f"Wish-–ª–∏—Å—Ç {data['username']}",
                    callback_data=f"wish_{user_id}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text("–ß–µ–π wish-–ª–∏—Å—Ç –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π wish-–ª–∏—Å—Ç
def show_user_wishlist(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    user_id = query.data.split('_')[1]
    
    wish_items = wishlists[str(chat_id)].get(user_id, [])
    username = birthdays[str(chat_id)][user_id]['username']
    
    if not wish_items:
        query.edit_message_text(f"‚ùå –£ {username} –µ—â—ë –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞!")
        return
    
    response = f"üéÅ Wish-–ª–∏—Å—Ç {username}:\n\n"
    for i, item in enumerate(wish_items, 1):
        response += f"{i}. {item['text']}\n"
    
    query.edit_message_text(response)

# –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
def admin_add_birthday(update: Update, context: CallbackContext):
    user = update.effective_user
    if f"@{user.username}" != ADMIN_USERNAME:
        update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_birthday @username –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    username = context.args[0]
    date_str = context.args[1]
    
    if not is_valid_birthday(date_str):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ user_id –ø–æ username
    # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {username}: {date_str}")

# –ê–¥–º–∏–Ω: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
def admin_set_time(update: Update, context: CallbackContext):
    user = update.effective_user
    if f"@{user.username}" != ADMIN_USERNAME:
        update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if len(context.args) < 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_time –ß–ß:–ú–ú")
        return
    
    time_str = context.args[0]
    try:
        datetime.strptime(time_str, '%H:%M')
        settings['reminder_time'] = time_str
        save_data(settings, SETTINGS_FILE)
        update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
def check_birthdays(context: CallbackContext):
    now = datetime.now().strftime('%d.%m')
    future = (datetime.now() + timedelta(days=14)).strftime('%d.%m')
    time_now = datetime.now().strftime('%H:%M')
    
    if time_now != settings['reminder_time']:
        return
    
    for chat_id, users in birthdays.items():
        for user_id, data in users.items():
            bday = data['birthday'][:5]  # –î–î.–ú–ú
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
            if bday == future:
                context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ ({data['birthday']}) "
                         f"–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {data['username']}!"
                )
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            elif bday == now:
                context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {data['username']}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
                )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
    try:
        with open('token.txt', 'r') as f:
            TOKEN = f.read().strip()
    except FileNotFoundError:
        print("–§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    updater = Updater(TOKEN)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.status_update.new_chat_members, welcome_new_member)],
        states={
            AWAITING_BIRTHDAY: [MessageHandler(Filters.text & ~Filters.command, process_birthday)],
            AWAITING_WISH: [
                MessageHandler(Filters.text & ~Filters.command, add_wish_item),
                CallbackQueryHandler(wish_buttons)
            ],
        },
        fallbacks=[],
        per_user=False
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("my_wishlist", show_my_wishlist))
    dp.add_handler(CommandHandler("birthdays", show_birthdays))
    dp.add_handler(CommandHandler("add_birthday", admin_add_birthday))
    dp.add_handler(CommandHandler("set_time", admin_set_time))
    dp.add_handler(CallbackQueryHandler(edit_wishlist, pattern='^(add_item|delete_item|clear_list|delete_|cancel)'))
    dp.add_handler(CallbackQueryHandler(show_all_wishlists, pattern='^view_wishlists$'))
    dp.add_handler(CallbackQueryHandler(show_user_wishlist, pattern='^wish_'))
    dp.add_handler(CallbackQueryHandler(show_birthdays, pattern='^back$'))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    jq = updater.job_queue
    jq.run_repeating(check_birthdays, interval=60, first=0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
