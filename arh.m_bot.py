import logging import datetime import json import re from pathlib import Path from telegram import (Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember, Chat) from telegram.ext import (ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ChatMemberHandler, JobQueue)

–ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º

BIRTHDAYS_FILE = Path("birthdays.json") WISHLISTS_FILE = Path("wishlists.json") SETTINGS_FILE = Path("settings.json") TOKEN_FILE = Path("token.txt")

–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞

with open(TOKEN_FILE) as f: TOKEN = f.read().strip()

–ê–¥–º–∏–Ω –±–æ—Ç–∞

ADMIN_USERNAME = "@mr_jasp"

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

birthdays = json.loads(BIRTHDAYS_FILE.read_text()) if BIRTHDAYS_FILE.exists() else {} wishlists = json.loads(WISHLISTS_FILE.read_text()) if WISHLISTS_FILE.exists() else {} settings = json.loads(SETTINGS_FILE.read_text()) if SETTINGS_FILE.exists() else {"reminder_hour": 13}

--- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def save_data(): BIRTHDAYS_FILE.write_text(json.dumps(birthdays, indent=2)) WISHLISTS_FILE.write_text(json.dumps(wishlists, indent=2)) SETTINGS_FILE.write_text(json.dumps(settings, indent=2))

def censor(text): banned = ["–º–∞—Ç", "—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ"] for word in banned: text = re.sub(word, "***", text, flags=re.IGNORECASE) return text

def parse_date(text): try: return datetime.datetime.strptime(text, "%d.%m.%Y").date() except ValueError: return None

def get_username(user): return user.username and f"@{user.username}" or user.full_name

--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ---

async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE): for member in update.chat_member.new_chat_members: await context.bot.send_message(chat_id=member.id, text=""" –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö. üéâüéÅ

1. –Ø –Ω–∞–ø–æ–º–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ —á—É–∂–∏—Ö –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –∏ –≤ —Å–∞–º –¥–µ–Ω—å.


2. –Ø –ø–æ–ø—Ä–æ—à—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å wish-–ª–∏—Å—Ç –∑–∞ –º–µ—Å—è—Ü –¥–æ —Ç–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.


3. –¢—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤.



–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì """)

--- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö.")

async def set_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE): date = parse_date(update.message.text) if date: birthdays[str(update.message.from_user.id)] = date.isoformat() save_data() await update.message.reply_text(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {date.strftime('%d.%m.%Y')}") else: await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

async def my_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE): uid = str(update.message.from_user.id) keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add")], [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="update")], [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete")]] if uid in wishlists: items = wishlists[uid] text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(items)]) await update.message.reply_text("–¢–≤–æ–π wish-–ª–∏—Å—Ç:\n" + text, reply_markup=InlineKeyboardMarkup(keyboard)) else: await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞. –ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é, –∏ —è –Ω–∞—á–Ω—É –µ–≥–æ.") context.user_data["waiting_for_wish"] = True

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE): uid = str(update.message.from_user.id) text = censor(update.message.text.strip())

if context.user_data.get("waiting_for_wish"):
    context.user_data.pop("waiting_for_wish")
    wishlists.setdefault(uid, []).append(text)
    save_data()
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π wish-–ª–∏—Å—Ç. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë? –ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ /done")
    context.user_data["waiting_for_wish"] = True
elif context.user_data.get("update_index") is not None:
    idx = context.user_data.pop("update_index")
    if uid in wishlists and 0 <= idx < len(wishlists[uid]):
        wishlists[uid][idx] = text
        save_data()
        await update.message.reply_text("–ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
else:
    date = parse_date(text)
    if date:
        await set_birthday(update, context)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start")

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE): context.user_data.pop("waiting_for_wish", None) await update.message.reply_text("–û–∫–µ–π, –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å wish-–ª–∏—Å—Ç–æ–º. üòä")

async def wishlist_button(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.callback_query await query.answer() uid = str(query.from_user.id) data = query.data

if data == "add":
    context.user_data["waiting_for_wish"] = True
    await query.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è wish-–ª–∏—Å—Ç–∞.")

elif data == "update":
    if uid in wishlists:
        keyboard = [[InlineKeyboardButton(f"{i+1}. {item[:20]}", callback_data=f"edit_{i}")]
                    for i, item in enumerate(wishlists[uid])]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                                       reply_markup=InlineKeyboardMarkup(keyboard))

elif data == "delete":
    if uid in wishlists:
        wishlists.pop(uid)
        save_data()
        await query.message.reply_text("Wish-–ª–∏—Å—Ç —É–¥–∞–ª—ë–Ω.")

elif data.startswith("edit_"):
    idx = int(data.split("_")[1])
    context.user_data["update_index"] = idx
    await query.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏:")

--- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---

async def admin_add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE): if update.message.from_user.username != ADMIN_USERNAME[1:]: await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.") return if len(context.args) != 2: await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add_birthday <user_id> <–¥–¥.–º–º.–≥–≥–≥–≥>") return user_id, date_str = context.args date = parse_date(date_str) if date: birthdays[str(user_id)] = date.isoformat() save_data() await update.message.reply_text("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.") else: await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

async def admin_set_hour(update: Update, context: ContextTypes.DEFAULT_TYPE): if update.message.from_user.username != ADMIN_USERNAME[1:]: await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.") return if len(context.args) != 1 or not context.args[0].isdigit(): await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /set_hour <—á–∞—Å>") return settings["reminder_hour"] = int(context.args[0]) save_data() await update.message.reply_text(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {context.args[0]}:00")

async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE): text = "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n" keyboard = [] for uid, iso in birthdays.items(): try: user = await context.bot.get_chat(uid) name = get_username(user) bday = datetime.date.fromisoformat(iso).strftime('%d.%m') text += f"{name}: {bday}\n" if uid in wishlists: keyboard.append([InlineKeyboardButton(f"Wish-–ª–∏—Å—Ç {name}", callback_data=f"showwl_{uid}")]) except: continue await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_other_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE): query = update.callback_query await query.answer() uid = query.data.split("_")[1] if uid in wishlists: items = wishlists[uid] text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(items)]) await query.message.reply_text(f"Wish-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{text}") else: await query.message.reply_text("Wish-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def next_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE): today = datetime.date.today() upcoming = [] for uid, iso in birthdays.items(): try: bday = datetime.date.fromisoformat(iso) this_year = bday.replace(year=today.year) if this_year < today: this_year = this_year.replace(year=today.year + 1) upcoming.append((this_year, uid)) except: continue upcoming.sort() text = "–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n" for d, uid in upcoming[:5]: try: user = await context.bot.get_chat(uid) name = get_username(user) text += f"{name} ‚Äî {d.strftime('%d.%m')}\n" except: continue await update.message.reply_text(text)

--- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---

def schedule_jobs(application): job_queue = application.job_queue job_queue.run_daily(send_reminders, time=datetime.time(settings["reminder_hour"]))

async def send_reminders(context: ContextTypes.DEFAULT_TYPE): today = datetime.date.today() for uid, iso_date in birthdays.items(): bday = datetime.date.fromisoformat(iso_date) next_bday = bday.replace(year=today.year) if next_bday < today: next_bday = next_bday.replace(year=today.year + 1)

delta = (next_bday - today).days
    if delta in [0, 14]:
        text = f"üéâ –°–∫–æ—Ä–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {get_username(await context.bot.get_chat(uid))} ({next_bday.strftime('%d.%m')})!"
        for user_id in birthdays:
            if user_id != uid:
                try:
                    await context.bot.send_message(chat_id=user_id, text=text)
                except:
                    continue

    if delta == 30:
        try:
            await context.bot.send_message(chat_id=uid, text="–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –•–æ—á–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å wish-–ª–∏—Å—Ç? –ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é!")
            context.user_data["waiting_for_wish"] = True
        except:
            continue

--- –ó–∞–ø—É—Å–∫ ---

if name == 'main': app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("my_wishlist", my_wishlist))
app.add_handler(CommandHandler("done", done))
app.add_handler(CommandHandler("add_birthday", admin_add_birthday))
app.add_handler(CommandHandler("set_hour", admin_set_hour))
app.add_handler(CommandHandler("birthdays", list_birthdays))
app.add_handler(CommandHandler("next_birthdays", next_birthdays))
app.add_handler(CallbackQueryHandler(wishlist_button, pattern="^(add|update|delete|edit_\\d+)$"))
app.add_handler(CallbackQueryHandler(show_other_wishlist, pattern="^showwl_\\d+$"))
app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_member))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

schedule_jobs(app)
app.run_polling()
