import os
import json
import re
import logging
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
SET_BIRTHDAY, SET_WISHLIST, ADMIN_ADD_BIRTHDAY = range(3)
ADMIN_USERNAME = "mr_jasp"  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
BIRTHDAYS_FILE = "birthdays.json"
WISHLISTS_FILE = "wishlists.json"
TOKEN_FILE = "token.txt"
GROUP_CHAT_ID_FILE = "group_chat_id.txt"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(filename):
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã
def save_group_chat_id(chat_id):
    with open(GROUP_CHAT_ID_FILE, 'w') as f:
        f.write(str(chat_id))

# –ó–∞–≥—Ä—É–∑–∫–∞ ID –≥—Ä—É–ø–ø—ã
def load_group_chat_id():
    if os.path.exists(GROUP_CHAT_ID_FILE):
        with open(GROUP_CHAT_ID_FILE, 'r') as f:
            try:
                return int(f.read().strip())
            except ValueError:
                return None
    return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
birthdays = load_data(BIRTHDAYS_FILE)
wishlists = load_data(WISHLISTS_FILE)
GROUP_CHAT_ID = load_group_chat_id()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def is_valid_birthdate(date_str):
    try:
        date = datetime.strptime(date_str, "%d.%m.%Y")
        return date <= datetime.now()
    except ValueError:
        return False

# –§–∏–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
def censor_text(text):
    bad_words = ["–º–∞—Ç1", "–º–∞—Ç2", "–º–∞—Ç3"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    for word in bad_words:
        text = re.sub(re.escape(word), "*—Ü–µ–Ω–∑—É—Ä–∞*", text, flags=re.IGNORECASE)
    return text

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üéÅ –ú–æ–π wish-–ª–∏—Å—Ç", callback_data="view_wishlist")],
        [InlineKeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å wish-–ª–∏—Å—Ç", callback_data="update_wishlist")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å wish-–ª–∏—Å—Ç", callback_data="delete_wishlist")],
        [InlineKeyboardButton("üìÖ –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="all_birthdays")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="change_birthday")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if update.message.chat.type == "private":
        if str(user.id) not in birthdays:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            return SET_BIRTHDAY
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard()
            )
    return ConversationHandler.END

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
async def set_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    date_str = update.message.text.strip()
    
    if not is_valid_birthdate(date_str):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return SET_BIRTHDAY
    
    birthdays[str(user.id)] = {
        "date": date_str,
        "username": user.username or user.full_name
    }
    save_data(birthdays, BIRTHDAYS_FILE)
    
    await update.message.reply_text(
        "–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π wish-–ª–∏—Å—Ç:"
    )
    return SET_WISHLIST

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ wish-–ª–∏—Å—Ç–∞
async def set_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    wishlist = censor_text(update.message.text)
    
    wishlists[str(user.id)] = wishlist
    save_data(wishlists, WISHLISTS_FILE)
    
    await update.message.reply_text(
        "Wish-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "view_wishlist":
        await view_wishlist(query)
    elif query.data == "update_wishlist":
        await update_wishlist_start(query)
    elif query.data == "delete_wishlist":
        await delete_wishlist(query, context)
    elif query.data == "all_birthdays":
        await all_birthdays(query)
    elif query.data == "change_birthday":
        await change_birthday_start(query)

# –ü—Ä–æ—Å–º–æ—Ç—Ä wish-–ª–∏—Å—Ç–∞
async def view_wishlist(query):
    user_id = str(query.from_user.id)
    if user_id in wishlists:
        await query.edit_message_text(f"–¢–≤–æ–π wish-–ª–∏—Å—Ç:\n{wishlists[user_id]}")
    else:
        await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ wish-–ª–∏—Å—Ç–∞.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ wish-–ª–∏—Å—Ç–∞
async def update_wishlist_start(query):
    await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π wish-–ª–∏—Å—Ç:")
    return SET_WISHLIST

# –£–¥–∞–ª–µ–Ω–∏–µ wish-–ª–∏—Å—Ç–∞
async def delete_wishlist(query, context):
    user_id = str(query.from_user.id)
    if user_id in wishlists:
        del wishlists[user_id]
        save_data(wishlists, WISHLISTS_FILE)
        await query.edit_message_text("Wish-–ª–∏—Å—Ç —É–¥–∞–ª–µ–Ω!")
    else:
        await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ wish-–ª–∏—Å—Ç–∞.")

# –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
async def all_birthdays(query):
    if not birthdays:
        await query.edit_message_text("–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    text = "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for user_id, data in birthdays.items():
        text += f"\n{data['username']}: {data['date']}"
    
    await query.edit_message_text(text)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
async def change_birthday_start(query):
    await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return SET_BIRTHDAY

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def birthday_reminders(context: ContextTypes.DEFAULT_TYPE):
    global GROUP_CHAT_ID
    if GROUP_CHAT_ID is None:
        GROUP_CHAT_ID = load_group_chat_id()
        if GROUP_CHAT_ID is None:
            return
    
    today = datetime.now().date()
    two_weeks_later = today + timedelta(days=14)
    
    for user_id, data in birthdays.items():
        try:
            bday = datetime.strptime(data["date"], "%d.%m.%Y").date()
            try:
                bday_this_year = bday.replace(year=today.year)
            except ValueError:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ 29 —Ñ–µ–≤—Ä–∞–ª—è
                bday_this_year = datetime(today.year, 3, 1).date()

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
            if bday_this_year == two_weeks_later:
                await context.bot.send_message(
                    chat_id=GROUP_CHAT_ID,
                    text=f"üéâ –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ ({bday_this_year.strftime('%d.%m')}) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {data['username']}!"
                )
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            if bday_this_year == today:
                await context.bot.send_message(
                    chat_id=GROUP_CHAT_ID,
                    text=f"üéÇ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {data['username']}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
                )
                
                # –ó–∞–ø—Ä–æ—Å wish-–ª–∏—Å—Ç–∞ –∑–∞ 1 –º–µ—Å—è—Ü
                one_month_before = bday_this_year - timedelta(days=30)
                if one_month_before == today:
                    if str(user_id) in wishlists:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="–ù–µ –∑–∞–±—É–¥—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π wish-–ª–∏—Å—Ç!"
                        )
                    else:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å —Å–≤–æ–π wish-–ª–∏—Å—Ç!"
                        )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def admin_add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username != ADMIN_USERNAME:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì"
    )
    return ADMIN_ADD_BIRTHDAY

async def admin_save_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return ADMIN_ADD_BIRTHDAY
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if update.message.reply_to_message.forward_from:
            user = update.message.reply_to_message.forward_from
        else:
            user = update.message.reply_to_message.from_user
        
        user_id = str(user.id)
        date_str = update.message.text.strip()
        
        if not is_valid_birthdate(date_str):
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!")
            return ADMIN_ADD_BIRTHDAY
        
        birthdays[user_id] = {
            "date": date_str,
            "username": user.username or user.full_name
        }
        save_data(birthdays, BIRTHDAYS_FILE)
        await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    return ConversationHandler.END

# –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã
async def new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global GROUP_CHAT_ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞
    if context.bot.id in [user.id for user in update.message.new_chat_members]:
        GROUP_CHAT_ID = update.message.chat.id
        save_group_chat_id(GROUP_CHAT_ID)
        await update.message.reply_text(
            "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–° /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for member in update.message.new_chat_members:
        if not member.is_bot:
            try:
                await context.bot.send_message(
                    chat_id=member.id,
                    text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è. "
                         "–ù–∞–ø–∏—à–∏ –º–Ω–µ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, "
                         "—á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await update.message.reply_text(
                    f"{member.full_name}, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–° /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
                )

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not os.path.exists(TOKEN_FILE):
        logger.error(f"–§–∞–π–ª {TOKEN_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(TOKEN_FILE, 'r') as f:
        token = f.read().strip()
    
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    app = Application.builder().token(token).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_member)
        ],
        states={
            SET_BIRTHDAY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_birthday),
                CommandHandler("cancel", cancel)
            ],
            SET_WISHLIST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_wishlist),
                CommandHandler("cancel", cancel)
            ],
            ADMIN_ADD_BIRTHDAY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_save_birthday),
                CommandHandler("cancel", cancel)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("admin_add", admin_add_birthday))
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 13:00
    job_queue = app.job_queue
    if job_queue:
        job_queue.run_daily(
            birthday_reminders,
            time=datetime.strptime("13:00", "%H:%M").time(),
            days=(0, 1, 2, 3, 4, 5, 6)
        )
    
    try:
        app.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    birthdays = load_data(BIRTHDAYS_FILE)
    wishlists = load_data(WISHLISTS_FILE)
    GROUP_CHAT_ID = load_group_chat_id()
    
    main()
