import json import logging import datetime import os 
from pathlib import Path from telegram import (Update, ReplyKeyboardMarkup, KeyboardButton) 
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackContext)

Enable logging

token_file = Path('token.txt') if not token_file.exists(): raise RuntimeError('token.txt not found') TOKEN = token_file.read_text().strip()

logging.basicConfig( format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO ) logger = logging.getLogger(name)

BIRTH_FILE = Path('birthdays.json') WISH_FILE = Path('wishlists.json') ADMIN_USERNAME = 'mr_jasp'

Load or initialize data

def load_data(path, default): if path.exists(): return json.loads(path.read_text()) else: return default

def save_data(path, data): path.write_text(json.dumps(data, ensure_ascii=False, indent=2))

birthdays = load_data(BIRTH_FILE, {})  # user_id -> 'YYYY-MM-DD' wishlists = load_data(WISH_FILE, {})  # user_id -> list[str]

Conversation states

ASK_DOB, ASK_WISH = range(2) UPDATE_CHOICE, UPDATE_INDEX, NEW_WISH = range(2, 5)

Helper functions

def validate_date(date_text): try: datetime.datetime.strptime(date_text, '%Y-%m-%d') return True except ValueError: return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user if update.message.chat.type in ['group', 'supergroup']: await update.message.reply_text( f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏ wish-–ª–∏—Å—Ç–∞—Ö." "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –Ω–∞–ø–æ–º–Ω—é –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ –≥—Ä—è–¥—É—â–∏—Ö –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö." ) else: await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.")

async def new_member(update: Update, context: ContextTypes.DEFAULT_TYPE): for member in update.message.new_chat_members: if member.is_bot: continue await update.message.reply_text( f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}! üëã\n" + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.") return ASK_DOB return ConversationHandler.END

async def ask_dob(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user text = update.message.text.strip() if not validate_date(text): await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (YYYY-MM-DD):") return ASK_DOB birthdays[str(user.id)] = text save_data(BIRTH_FILE, birthdays) context.user_data['dob'] = text await update.message.reply_text( "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à wish-–ª–∏—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é:") wishlists[str(user.id)] = [] save_data(WISH_FILE, wishlists) return ASK_WISH

async def ask_wish(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = str(update.effective_user.id) text = update.message.text.strip() if text: wishlists[user_id].append(text) save_data(WISH_FILE, wishlists) await update.message.reply_text("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é, –∏–Ω–∞—á–µ /done.") return ASK_WISH

async def done_wish(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("–í–∞—à wish-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω! –°–ø–∞—Å–∏–±–æ.") return ConversationHandler.END

User commands

async def show_wish(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = str(update.effective_user.id) wl = wishlists.get(user_id) if not wl: return await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update_wish, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.") text = "–í–∞—à wish-–ª–∏—Å—Ç:\n" + "\n".join(f"{i+1}. {item}" for i, item in enumerate(wl)) await update.message.reply_text(text)

async def delete_wish(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = str(update.effective_user.id) if user_id in wishlists: del wishlists[user_id] save_data(WISH_FILE, wishlists) await update.message.reply_text("–í–∞—à wish-–ª–∏—Å—Ç —É–¥–∞–ª–µ–Ω.") else: await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞.")

async def list_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE): if not birthdays: return await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.") text = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" for uid, dob in birthdays.items(): user = await context.bot.get_chat(int(uid)) text += f"{user.full_name}: {dob}\n" await update.message.reply_text(text)

async def list_birthdays_with_wish(update: Update, context: ContextTypes.DEFAULT_TYPE): if not birthdays: return await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.") msg = [] for uid, dob in birthdays.items(): user = await context.bot.get_chat(int(uid)) msg.append(f"{user.full_name}: {dob}") wl = wishlists.get(uid) if wl: msg.extend(f"  {i+1}. {item}" for i, item in enumerate(wl)) await update.message.reply_text("\n".join(msg))

Update wish list

async def update_wish_command(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = str(update.effective_user.id) wl = wishlists.get(user_id, []) if not wl: await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /update_wish, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.") return ConversationHandler.END keyboard = [[str(i+1)] for i in range(len(wl))] + [['add'], ['cancel']] await update.message.reply_text( "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ 'add' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True) ) return UPDATE_CHOICE

async def update_choice(update: Update, context: ContextTypes.DEFAULT_TYPE): text = update.message.text.strip() user_id = str(update.effective_user.id) wl = wishlists.get(user_id, []) if text == 'add': await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é:") context.user_data['action'] = 'add' return NEW_WISH if text.isdigit() and 1 <= int(text) <= len(wl): index = int(text) - 1 context.user_data['index'] = index await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:") context.user_data['action'] = 'update' return NEW_WISH await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.") return UPDATE_CHOICE

async def process_new_wish(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = str(update.effective_user.id) text = update.message.text.strip() action = context.user_data.get('action') if action == 'add': wishlists[user_id].append(text) elif action == 'update': idx = context.user_data['index'] wishlists[user_id][idx] = text save_data(WISH_FILE, wishlists) await update.message.reply_text("–í–∞—à wish-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.") return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.") return ConversationHandler.END

Admin commands

def admin_only(func): async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs): if update.effective_user.username != ADMIN_USERNAME: return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.") return await func(update, context, *args, **kwargs) return wrapper

@admin_only async def add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE): parts = update.message.text.split() if len(parts) != 3 or not validate_date(parts[2]): return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_birthday @username YYYY-MM-DD") username, date = parts[1], parts[2] try: user = await context.bot.get_chat(username) except: return await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.") birthdays[str(user.id)] = date save_data(BIRTH_FILE, birthdays) await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {user.full_name} - {date}")

@admin_only async def set_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE): parts = update.message.text.split() if len(parts) != 2: return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_time HH:MM") try: h, m = map(int, parts[1].split(':')) context.job_queue.run_daily(reminder_job, time=datetime.time(hour=h, minute=m), context=update.message.chat_id) await update.message.reply_text(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {parts[1]}") except ValueError: await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")

Reminder job

def get_today(): return datetime.date.today()

async def reminder_job(context: ContextTypes.DEFAULT_TYPE): chat_id = context.job.chat_id today = get_today() for uid, dob in birthdays.items(): date = datetime.datetime.strptime(dob, '%Y-%m-%d').date() delta = (date.replace(year=today.year) - today).days if delta == 0 or delta == 14: user = await context.bot.get_chat(int(uid)) when = '—Å–µ–≥–æ–¥–Ω—è' if delta == 0 else f'—á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ ({dob})' await context.bot.send_message( chat_id=chat_id, text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É {user.full_name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {when}. " f"@{user.username if user.username else ''}" ) if delta == 30: await context.bot.send_message( chat_id=int(uid), text=f"–í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü ({dob}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ wish-–ª–∏—Å—Ç." "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")

def main(): app = ApplicationBuilder().token(TOKEN).build()

# Handlers
app.add_handler(CommandHandler('start', start))
new_member_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_member)],
    states={ASK_DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_dob)],
            ASK_WISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_wish),
                       CommandHandler('done', done_wish)]},
    fallbacks=[CommandHandler('cancel', cancel)],
)
app.add_handler(new_member_conv)

# Wish commands
app.add_handler(CommandHandler('show_wish', show_wish))
app.add_handler(CommandHandler('delete_wish', delete_wish))
app.add_handler(CommandHandler('list_birthdays', list_birthdays))
app.add_handler(CommandHandler('list_all', list_birthdays_with_wish))

update_conv = ConversationHandler(
    entry_points=[CommandHandler('update_wish', update_wish_command)],
    states={UPDATE_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_choice)],
            NEW_WISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_new_wish)]},
    fallbacks=[CommandHandler('cancel', cancel)],
)
app.add_handler(update_conv)

# Admin
app.add_handler(CommandHandler('add_birthday', add_birthday))
app.add_handler(CommandHandler('set_time', set_reminder_time))

# Schedule default daily reminder at 13:00
app.job_queue.run_daily(reminder_job, time=datetime.time(hour=13, minute=0), context=None)

app.run_polling()

if name == 'main': main()

