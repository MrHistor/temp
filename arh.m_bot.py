import os
import json
import re
import logging
from datetime import datetime, timedelta
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InputFile
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
SET_BIRTHDAY, ADD_WISHLIST_ITEM, UPDATE_WISHLIST, ADMIN_ADD_BIRTHDAY = range(4)
ADMIN_USERNAME = "mr_jasp" # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞
VIEW_OTHERS_WISHLIST, DELETE_ITEM = range(2)
# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
BIRTHDAYS_FILE = "birthdays.json"
WISHLISTS_FILE = "wishlists.json"
TOKEN_FILE = "token.txt"
GROUP_CHAT_ID_FILE = "group_chat_id.txt"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(filename):
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã
def save_group_chat_id(chat_id):
    with open(GROUP_CHAT_ID_FILE, 'w') as f:
        f.write(str(chat_id))

# –ó–∞–≥—Ä—É–∑–∫–∞ ID –≥—Ä—É–ø–ø—ã
def load_group_chat_id():
    if os.path.exists(GROUP_CHAT_ID_FILE):
        with open(GROUP_CHAT_ID_FILE, 'r') as f:
            try:
                return int(f.read().strip())
            except ValueError:
                return None
    return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
birthdays = load_data(BIRTHDAYS_FILE)
wishlists = load_data(WISHLISTS_FILE)
GROUP_CHAT_ID = load_group_chat_id()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def is_valid_birthdate(date_str):
    try:
        date = datetime.strptime(date_str, "%d.%m.%Y")
        return date <= datetime.now()
    except ValueError:
        return False

# –§–∏–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
def censor_text(text):
    bad_words = ["–º–∞—Ç1", "–º–∞—Ç2", "–º–∞—Ç3"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    for word in bad_words:
        text = re.sub(re.escape(word), "*—Ü–µ–Ω–∑—É—Ä–∞*", text, flags=re.IGNORECASE)
    return text

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üéÅ –ú–æ–π wish-–ª–∏—Å—Ç")],
            [KeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å wish-–ª–∏—Å—Ç")],
            [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å wish-–ª–∏—Å—Ç")],
            [KeyboardButton("üìÖ –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")],
            [KeyboardButton("üëÄ Wish-–ª–∏—Å—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Birthday Bot!* üéÇ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –∏ –∫–æ–ª–ª–µ–≥. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
- –ó–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
- –í —Å–∞–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
- –ó–∞ –º–µ—Å—è—Ü –¥–æ –î–† –Ω–∞–ø–æ–º–Ω—é –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É –æ–±–Ω–æ–≤–∏—Ç—å wish-–ª–∏—Å—Ç

üìù *Wish-–ª–∏—Å—Ç:*
- –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
- –û–±–Ω–æ–≤–ª—è–π—Ç–µ –µ–≥–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–ø–∏—Å–∫–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üë• *–î–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*
- –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–æ—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
- –ü–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å wish-–ª–∏—Å—Ç

‚è∞ *–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 13:00*

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if update.message.chat.type == "private":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            WELCOME_MESSAGE,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        
        if str(user.id) not in birthdays:
            await update.message.reply_text(
                "üìÖ –£–∫–∞–∂–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
                reply_markup=ReplyKeyboardRemove()
            )
            return SET_BIRTHDAY
        else:
            await show_main_menu(update, context)
    return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
async def set_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    date_str = update.message.text.strip()
    
    if not is_valid_birthdate(date_str):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return SET_BIRTHDAY
    
    birthdays[str(user.id)] = {
        "date": date_str,
        "username": user.username or user.full_name
    }
    save_data(birthdays, BIRTHDAYS_FILE)
    
    await update.message.reply_text(
        "‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π wish-–ª–∏—Å—Ç. "
        "–û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_WISHLIST_ITEM

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ wish-–ª–∏—Å—Ç
async def add_wishlist_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    item = censor_text(update.message.text.strip())
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wish-–ª–∏—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in wishlists:
        wishlists[user_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    wishlists[user_id].append(item)
    save_data(wishlists, WISHLISTS_FILE)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    await update.message.reply_text(
        f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {item}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("/done")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return ADD_WISHLIST_ITEM

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è wish-–ª–∏—Å—Ç–∞
async def finish_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    
    if user_id in wishlists and wishlists[user_id]:
        await update.message.reply_text(
            "üéâ –¢–≤–æ–π wish-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ wish-–ª–∏—Å—Ç",
            reply_markup=main_menu_keyboard()
        )
    
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä wish-–ª–∏—Å—Ç–∞
async def view_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    
    if user_id in wishlists and wishlists[user_id]:
        wishlist_text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(wishlists[user_id])])
        await update.message.reply_text(
            f"üìù –¢–≤–æ–π wish-–ª–∏—Å—Ç:\n\n{wishlist_text}",
            reply_markup=main_menu_keyboard()
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"wishlist_{user_id}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(wishlist_text)
        
        await update.message.reply_document(
            document=open(filename, "rb"),
            caption="–í–æ—Ç —Ç–≤–æ–π wish-–ª–∏—Å—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞",
            reply_markup=main_menu_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
    else:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞. –ù–∞–∂–º–∏ '‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å wish-–ª–∏—Å—Ç' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å",
            reply_markup=main_menu_keyboard()
        )

# –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è wish-–ª–∏—Å—Ç–∞
async def update_wishlist_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    if user_id not in wishlists or not wishlists[user_id]:
        await update.message.reply_text(
            "üìù –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADD_WISHLIST_ITEM
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π wish-–ª–∏—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    wishlist_text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(wishlists[user_id])])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = []
    for i in range(len(wishlists[user_id])):
        keyboard.append([KeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é {i+1}")])
    
    keyboard.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é")])
    keyboard.append([KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")])
    
    await update.message.reply_text(
        f"üìù –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π wish-–ª–∏—Å—Ç:\n\n{wishlist_text}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    return UPDATE_WISHLIST

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ wish-–ª–∏—Å—Ç–∞
async def update_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    item = censor_text(update.message.text.strip())
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wish-–ª–∏—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in wishlists:
        wishlists[user_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    wishlists[user_id].append(item)
    save_data(wishlists, WISHLISTS_FILE)
    
    await update.message.reply_text(
        f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {item}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("/done")]],
            resize_keyboard=True
        )
    )
    return UPDATE_WISHLIST

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ wish-–ª–∏—Å—Ç–∞
async def handle_wishlist_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    file = await update.message.document.get_file()
    await file.download_to_drive(f"wishlist_{user_id}_temp.txt")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    try:
        with open(f"wishlist_{user_id}_temp.txt", "r", encoding="utf-8") as f:
            content = f.read().splitlines()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        items = [censor_text(line.strip()) for line in content if line.strip()]
        
        if items:
            wishlists[user_id] = items
            save_data(wishlists, WISHLISTS_FILE)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞
            wishlist_text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(items)])
            
            await update.message.reply_text(
                "‚úÖ Wish-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞!\n\n"
                f"–¢–≤–æ–π –Ω–æ–≤—ã–π wish-–ª–∏—Å—Ç:\n\n{wishlist_text}",
                reply_markup=main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=main_menu_keyboard()
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(f"wishlist_{user_id}_temp.txt"):
        os.remove(f"wishlist_{user_id}_temp.txt")
    
    return ConversationHandler.END

async def delete_wishlist_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä: "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é 3")
    try:
        position = int(text.split()[-1]) - 1
        if 0 <= position < len(wishlists[user_id]):
            # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            removed_item = wishlists[user_id].pop(position)
            save_data(wishlists, WISHLISTS_FILE)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞: {removed_item}",
                reply_markup=main_menu_keyboard()
            )
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏",
                reply_markup=main_menu_keyboard()
            )
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
        
# –£–¥–∞–ª–µ–Ω–∏–µ wish-–ª–∏—Å—Ç–∞
async def delete_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id in wishlists:
        del wishlists[user_id]
        save_data(wishlists, WISHLISTS_FILE)
        await update.message.reply_text(
            "‚úÖ Wish-–ª–∏—Å—Ç —É–¥–∞–ª–µ–Ω!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç wish-–ª–∏—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=main_menu_keyboard()
        )

# –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
async def all_birthdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not birthdays:
        await update.message.reply_text(
            "‚ùå –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    text = "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for user_id, data in birthdays.items():
        text += f"‚Ä¢ {data['username']}: {data['date']}\n"
    
    await update.message.reply_text(
        text,
        reply_markup=main_menu_keyboard()
    )

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def birthday_reminders(context: ContextTypes.DEFAULT_TYPE):
    global GROUP_CHAT_ID
    if GROUP_CHAT_ID is None:
        GROUP_CHAT_ID = load_group_chat_id()
        if GROUP_CHAT_ID is None:
            return
    
    today = datetime.now().date()
    two_weeks_later = today + timedelta(days=14)
    
    for user_id, data in birthdays.items():
        try:
            bday = datetime.strptime(data["date"], "%d.%m.%Y").date()
            try:
                bday_this_year = bday.replace(year=today.year)
            except ValueError:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ 29 —Ñ–µ–≤—Ä–∞–ª—è
                bday_this_year = datetime(today.year, 3, 1).date()

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
            if bday_this_year == two_weeks_later:
                await context.bot.send_message(
                    chat_id=GROUP_CHAT_ID,
                    text=f"üéâ –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ ({bday_this_year.strftime('%d.%m')}) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {data['username']}!"
                )
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
            if bday_this_year == today:
                await context.bot.send_message(
                    chat_id=GROUP_CHAT_ID,
                    text=f"üéÇ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {data['username']}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
                )
                
                # –ó–∞–ø—Ä–æ—Å wish-–ª–∏—Å—Ç–∞ –∑–∞ 1 –º–µ—Å—è—Ü
                one_month_before = bday_this_year - timedelta(days=30)
                if one_month_before == today:
                    user_id_str = str(user_id)
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="üéÅ –ù–µ –∑–∞–±—É–¥—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π wish-–ª–∏—Å—Ç!",
                        reply_markup=main_menu_keyboard()
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def admin_add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username != ADMIN_USERNAME:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì"
    )
    return ADMIN_ADD_BIRTHDAY

async def admin_save_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return ADMIN_ADD_BIRTHDAY
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if update.message.reply_to_message.forward_from:
            user = update.message.reply_to_message.forward_from
        else:
            user = update.message.reply_to_message.from_user
        
        user_id = str(user.id)
        date_str = update.message.text.strip()
        
        if not is_valid_birthdate(date_str):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!")
            return ADMIN_ADD_BIRTHDAY
        
        birthdays[user_id] = {
            "date": date_str,
            "username": user.username or user.full_name
        }
        save_data(birthdays, BIRTHDAYS_FILE)
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    return ConversationHandler.END

# –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã
async def new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global GROUP_CHAT_ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞
    if context.bot.id in [user.id for user in update.message.new_chat_members]:
        GROUP_CHAT_ID = update.message.chat.id
        save_group_chat_id(GROUP_CHAT_ID)
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–° /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for member in update.message.new_chat_members:
        if not member.is_bot:
            try:
                await context.bot.send_message(
                    chat_id=member.id,
                    text=WELCOME_MESSAGE,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await update.message.reply_text(
                    f"üëã {member.full_name}, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–° /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
                )

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –º–µ–Ω—é)
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = str(update.message.from_user.id)
    
    if text == "üéÅ –ú–æ–π wish-–ª–∏—Å—Ç":
        await view_wishlist(update, context)
    elif text == "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å wish-–ª–∏—Å—Ç":
        await update_wishlist_start(update, context)
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å wish-–ª–∏—Å—Ç":
        await delete_wishlist(update, context)
    elif text == "üìÖ –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è":
        await all_birthdays(update, context)
    elif text == "üëÄ Wish-–ª–∏—Å—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        await show_users_list(update, context)
    elif text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"):
        await delete_wishlist_item(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é":
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è wish-–ª–∏—Å—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return ADD_WISHLIST_ITEM
    elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ":
        await update.message.reply_text(
            "‚úÖ Wish-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=main_menu_keyboard()
        )

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not birthdays:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            reply_markup=main_menu_keyboard()
        )
        return
    
    keyboard = []
    for user_id, data in birthdays.items():
        if user_id in wishlists and wishlists[user_id]:
            username = data['username']
            keyboard.append([KeyboardButton(f"üë§ {username}")])
    
    if not keyboard:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å wish-–ª–∏—Å—Ç–∞–º–∏",
            reply_markup=main_menu_keyboard()
        )
        return
    
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ wish-–ª–∏—Å—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    
    return VIEW_OTHERS_WISHLIST

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ wish-–ª–∏—Å—Ç–∞ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def view_others_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ "üë§ "
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    for user_id, data in birthdays.items():
        if data['username'] == username and user_id in wishlists and wishlists[user_id]:
            wishlist_text = "\n".join([f"{i+1}. {item}" for i, item in enumerate(wishlists[user_id])])
            
            await update.message.reply_text(
                f"üéÅ Wish-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n\n{wishlist_text}",
                reply_markup=main_menu_keyboard()
            )
            return ConversationHandler.END
    
    await update.message.reply_text(
        "‚ùå Wish-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END
    
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not os.path.exists(TOKEN_FILE):
        logger.error(f"–§–∞–π–ª {TOKEN_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(TOKEN_FILE, 'r') as f:
        token = f.read().strip()
    
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    app = Application.builder().token(token).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_member),
            MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, menu_handler)
        ],
        states={
            SET_BIRTHDAY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_birthday),
                CommandHandler("cancel", cancel)
            ],
            ADD_WISHLIST_ITEM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_wishlist_item),
                CommandHandler("done", finish_wishlist),
                CommandHandler("cancel", cancel),
                MessageHandler(filters.Document.TXT, handle_wishlist_file)
            ],
            UPDATE_WISHLIST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ menu_handler
                CommandHandler("cancel", cancel)
            ],
            ADMIN_ADD_BIRTHDAY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_save_birthday),
                CommandHandler("cancel", cancel)
            ],
            VIEW_OTHERS_WISHLIST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, view_others_wishlist),
                CommandHandler("cancel", cancel)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("admin_add", admin_add_birthday))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, menu_handler))
    app.add_handler(MessageHandler(filters.Document.TXT & filters.ChatType.PRIVATE, handle_wishlist_file))
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 13:00
    job_queue = app.job_queue
    if job_queue:
        job_queue.run_daily(
            birthday_reminders,
            time=datetime.strptime("13:00", "%H:%M").time(),
            days=(0, 1, 2, 3, 4, 5, 6)
        )
    
    try:
        app.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    birthdays = load_data(BIRTHDAYS_FILE)
    wishlists = load_data(WISHLISTS_FILE)
    GROUP_CHAT_ID = load_group_chat_id()
    
    main()
