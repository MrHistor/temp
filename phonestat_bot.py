import os
import re
import zipfile
import tempfile
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    keyboard = [
        [KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    text = (
        "üîã Battery Log Analyzer Bot\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "1. ZIP-–∞—Ä—Ö–∏–≤ —Å –ª–æ–≥–æ–º (—Å–æ–¥–µ—Ä–∂–∞—â–∏–π bugreport*.txt)\n"
        "2. TXT-—Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º bugreport*.txt\n\n"
        "–Ø –∏–∑–≤–ª–µ–∫—É –¥–∞–Ω–Ω—ã–µ –æ –±–∞—Ç–∞—Ä–µ–µ (fc –∏ cc)"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    with tempfile.TemporaryDirectory() as tmp_dir:
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await update.message.document.get_file()
            file_path = os.path.join(tmp_dir, "file")
            await file.download_to_drive(file_path)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP
            if file_path.endswith(".zip"):
                result = await process_zip(file_path, tmp_dir)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ TXT
            elif file_path.endswith(".txt") and "bugreport" in file_path.lower():
                result = await process_txt(file_path)
            else:
                result = "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–µ–Ω ZIP –∏–ª–∏ TXT (bugreport*.txt)"
            
            await update.message.reply_text(result)
        
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def process_zip(zip_path: str, tmp_dir: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞"""
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(tmp_dir)
    
    # –ü–æ–∏—Å–∫ txt-—Ñ–∞–π–ª–æ–≤
    for root, _, files in os.walk(tmp_dir):
        for file in files:
            if file.startswith("bugreport") and file.endswith(".txt"):
                return await process_txt(os.path.join(root, file))
    
    return "‚ùå –í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª bugreport*.txt"

async def process_txt(file_path: str) -> str:
    """–ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ TXT-—Ñ–∞–π–ª–∞"""
    fc_value = cc_value = None
    pattern = re.compile(r'healthd.*?fc=(\d+).*?cc=(\d+)')
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            for line in f:
                if "healthd" in line:
                    match = pattern.search(line)
                    if match:
                        fc_value = match.group(1)
                        cc_value = match.group(2)
    
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
    
    if fc_value and cc_value:
        return (
            f"üîã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n"
            f"‚Ä¢ Capacity (fc) = {fc_value}\n"
            f"‚Ä¢ Cycles (cc) = {cc_value}"
        )
    return "‚ùå –î–∞–Ω–Ω—ã–µ –æ –±–∞—Ç–∞—Ä–µ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"), handle_file))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
