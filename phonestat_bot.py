import os
import re
import zipfile
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
def parse_log_file(file):
    data = {
        "capacity": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
        "cycles": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
        "build": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
        "ram": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
        "rom": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
        "accounts": []
    }
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    patterns = {
        "healthd": re.compile(r'healthd:.*fc=(\d+).*cc=(\d+)'),
        "build": re.compile(r'Build:\s*([^\s]+)'),
        "ram": re.compile(r'androidboot\.hardware\.ddr\s*=\s*"([^"]+)"\s*,\s*"([^"]+)"\s*,\s*"([^"]+)"'),
        "rom": re.compile(r'androidboot\.hardware\.ufs\s*=\s*"([^"]+)"\s*,\s*"([^"]+)"'),
        "account": re.compile(r'Account\s*\{name=([^,]+?),\s*type=([^\}]+?)\}')
    }

    # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    seen_accounts = set()

    # –ü–æ—Å—Ç—Ä–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    for line in file:
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            line_str = line.decode('utf-8', errors='ignore')
        except AttributeError:
            line_str = line
            
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ
        if "healthd" in line_str and data["capacity"] == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
            match = patterns["healthd"].search(line_str)
            if match:
                capacity = match.group(1)
                # –£–¥–∞–ª—è–µ–º —Ç—Ä–∏ –Ω—É–ª—è —Å –∫–æ–Ω—Ü–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º mAh
                if capacity.endswith('000'):
                    capacity = capacity[:-3] + "mAh"
                else:
                    capacity += "mAh"
                data["capacity"] = capacity
                data["cycles"] = match.group(2)
                
        elif "Build:" in line_str and data["build"] == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
            match = patterns["build"].search(line_str)
            if match:
                data["build"] = match.group(1)
                
        elif "androidboot.hardware.ddr" in line_str and data["ram"] == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
            match = patterns["ram"].search(line_str)
            if match:
                data["ram"] = f"{match.group(1)}, {match.group(2)}, {match.group(3)}"
                
        elif "androidboot.hardware.ufs" in line_str and data["rom"] == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
            match = patterns["rom"].search(line_str)
            if match:
                data["rom"] = f"{match.group(1)}, {match.group(2)}"
                
        elif "Account {" in line_str:
            match = patterns["account"].search(line_str)
            if match:
                account_name = match.group(1).strip()
                account_type = match.group(2).strip()
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–∞–ª–∏—á–∏—é '@' –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                if '@' in account_name:
                    account_id = f"{account_name.lower()}|{account_type.lower()}"
                    if account_id not in seen_accounts:
                        seen_accounts.add(account_id)
                        data["accounts"].append((account_name, account_type))
                
    return data

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def format_results(data):
    accounts = "\n".join([f"‚Ä¢ {name} ({type})" for name, type in data["accounts"]]) or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    return (
        "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∞:\n\n"
        f"üîã –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏: {data['capacity']}\n"
        f"üîÑ –¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞: {data['cycles']}\n"
        f"üì± Build: {data['build']}\n"
        f"üíæ RAM: {data['ram']}\n"
        f"üíΩ ROM: {data['rom']}\n\n"
        f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã:\n{accounts}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context):
    keyboard = [[InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data='instruction')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Bug Report —Ç–≤–æ–µ–≥–æ Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
        "- –ë–∞—Ç–∞—Ä–µ–µ (–µ–º–∫–æ—Å—Ç—å –∏ —Ü–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞)\n"
        "- –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏\n"
        "- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö RAM –∏ ROM\n"
        "- –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ ZIP-—Ñ–∞–π–ª —Å –ª–æ–≥–æ–º!"
    )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async def show_instruction(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    instruction = (
        "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å Bug Report –Ω–∞ Android:\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' > '–û —Ç–µ–ª–µ—Ñ–æ–Ω–µ'\n"
        "2. –ù–∞–∂–º–∏—Ç–µ 7 —Ä–∞–∑ –Ω–∞ '–ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏' –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n"
        "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' > '–°–∏—Å—Ç–µ–º–∞' > '–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'\n"
        "4. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ '–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö'\n"
        "5. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –ø–∏—Ç–∞–Ω–∏—è + Volume Down)\n"
        "6. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)\n"
        "7. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å ZIP-—Ñ–∞–π–ª–æ–º —á–µ—Ä–µ–∑ Telegram"
    )
    
    await query.edit_message_text(
        text=instruction,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]])
    )

# –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
async def back_to_main(update: Update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text= (
        "–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Bug Report —Ç–≤–æ–µ–≥–æ Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
        "- –ë–∞—Ç–∞—Ä–µ–µ (–µ–º–∫–æ—Å—Ç—å –∏ —Ü–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞)\n"
        "- –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏\n"
        "- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö RAM –∏ ROM\n"
        "- –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ ZIP-—Ñ–∞–π–ª —Å –ª–æ–≥–æ–º Android –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        ),
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data='instruction')]])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ZIP-—Ñ–∞–π–ª–æ–≤
async def handle_zip(update: Update, context):
    message = update.message
    document = message.document
    
    if not document.file_name.endswith('.zip'):
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-—Ñ–∞–π–ª.")
        return
        
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    file = await context.bot.get_file(document)
    file_stream = io.BytesIO()
    await file.download_to_memory(file_stream)
    file_stream.seek(0)
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
        with zipfile.ZipFile(file_stream) as z:
            # –ò—â–µ–º –ª–æ–≥-—Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            log_files = []
            for file_info in z.infolist():
                if "bugreport" in file_info.filename and file_info.filename.endswith('.txt'):
                    log_files.append(file_info.filename)
            
            if not log_files:
                await message.reply_text("‚ùå –§–∞–π–ª –ª–æ–≥–∞ bugreport*.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ.")
                return
                
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª
            with z.open(log_files[0]) as log_file:
                data = parse_log_file(log_file)
                result = format_results(data)
                await message.reply_text(result)
                
    except Exception as e:
        await message.reply_text(f"‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
    with open('token.txt') as f:
        token = f.read().strip()
    
    app = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_zip))
    app.add_handler(CallbackQueryHandler(show_instruction, pattern='instruction'))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern='back'))
    
    app.run_polling()

if __name__ == '__main__':
    main()
